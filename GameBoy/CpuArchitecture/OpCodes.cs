
using System;
using System.Runtime.CompilerServices;
using System.Security.Policy;

namespace GameBoy.CpuArchitecture
{
    public static class OpCodes
    {
        public const byte ExtendedTableOpCode = 0xCB;

        public static readonly OpCode[] SingleByteOpCodes =
        {
            // TODO might need unchecked environments, but I dont think this is needed?

            // 0x00 - 0x0F
            new OpCode(0x00, "NOP",         4,  0, (cpu, i) => { }),
            new OpCode(0x01, "LD BC d16" ,  12, 2, (cpu, i) => cpu.Registers.BC = i.Operand16 ),
            new OpCode(0x02, "LD (BC) A",   8,  0, (cpu, i) => cpu.MemController.Write(cpu.Registers.BC, cpu.Registers.A)),
            new OpCode(0x03, "INC BC",      8,  0, (cpu, i) => cpu.Registers.BC = cpu.Alu.Inc(cpu.Registers.BC)),
            new OpCode(0x04, "INC B",       4,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Inc(cpu.Registers.B)),
            new OpCode(0x05, "DEC B",       4,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Dec(cpu.Registers.B)),
            new OpCode(0x06, "LD B d8",     8,  1, (cpu, i) => cpu.Registers.B = i.Operand8),
            new OpCode(0x07, "RLCA",        4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Rlca()),
            new OpCode(0x08, "LD (d16) SP", 20, 2, (cpu, i) => cpu.MemController.Write(i.Operand16, cpu.SP)),
            new OpCode(0x09, "ADD HL BC",   8,  0, (cpu, i) => cpu.Registers.HL = cpu.Alu.Add(cpu.Registers.HL, cpu.Registers.BC)),
            new OpCode(0x0A, "LD A (BC)",   8,  0, (cpu, i) => cpu.Registers.A = cpu.MemController.Read(cpu.Registers.BC)),
            new OpCode(0x0B, "DEC BC",      8,  0, (cpu, i) => cpu.Registers.BC = cpu.Alu.Dec(cpu.Registers.BC)),
            new OpCode(0x0C, "INC C",       4,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Inc(cpu.Registers.C)),
            new OpCode(0x0D, "DEC C",       4,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Dec(cpu.Registers.C)),
            new OpCode(0x0E, "LD C d8",     8,  1, (cpu, i) => cpu.Registers.C = i.Operand8),
            new OpCode(0x0F, "RRCA",        4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Rrca()),

            // 0x10 - 0x1F
            new OpCode(0x10, "STOP 0",      4,  0, (cpu, i) => cpu.Stop()), // TODO Improve?
            new OpCode(0x11, "LD DE d16",   12, 2, (cpu, i) => cpu.Registers.DE = i.Operand16),
            new OpCode(0x12, "LD (DE) A",   8,  0, (cpu, i) => cpu.MemController.Write(cpu.Registers.DE, cpu.Registers.A)),
            new OpCode(0x13, "INC DE",      8,  0, (cpu, i) => cpu.Registers.DE = cpu.Alu.Inc(cpu.Registers.DE)),
            new OpCode(0x14, "INC D",       4,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Inc(cpu.Registers.D)),
            new OpCode(0x15, "DEC D",       4,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Dec(cpu.Registers.D)),
            new OpCode(0x16, "LD D d8",     8,  1, (cpu, i) => cpu.Registers.D = i.Operand8),
            new OpCode(0x17, "RLA",         4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Rla()),
            new OpCode(0x18, "JR d8",       12, 1, (cpu, i) => cpu.JumpRelative(((sbyte) i.Operand8))),
            new OpCode(0x19, "ADD HL DE",   8,  0, (cpu, i) => cpu.Registers.HL = cpu.Alu.Add(cpu.Registers.HL, cpu.Registers.DE)),
            new OpCode(0x1A, "LD A (DE)",   8,  0, (cpu, i) => cpu.Registers.A = cpu.MemController.Read(cpu.Registers.DE)),
            new OpCode(0x1B, "DEC DE",      8,  0, (cpu, i) => cpu.Registers.DE = cpu.Alu.Dec(cpu.Registers.DE)),
            new OpCode(0x1C, "INC E",       4,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Inc(cpu.Registers.E)),
            new OpCode(0x1D, "DEC E",       4,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Dec(cpu.Registers.E)),
            new OpCode(0x1E, "LD E d8",     8,  1, (cpu, i) => cpu.Registers.E = i.Operand8),
            new OpCode(0x1F, "RRA",         4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Rra()),

            // 0x20 - 0x2F
            new OpCode(0x20, "JR NZ r8",    12, 8, 1, (cpu, i) => cpu.JumpRelativeConditional(i.OpCode, (sbyte) i.Operand8, !cpu.Registers.AreFlagsSet(RegisterFlags.Z))),
            new OpCode(0x21, "LD HL d16",   12, 2, (cpu, i) => cpu.Registers.HL = i.Operand16),
            new OpCode(0x22, "LD (HL+) A",  8,  0, (cpu, i) => { cpu.MemController.Write(cpu.Registers.HL, cpu.Registers.A); cpu.Registers.HL = cpu.Alu.Inc(cpu.Registers.HL); }),
            new OpCode(0x23, "INC HL",      8,  0, (cpu, i) => cpu.Registers.HL = cpu.Alu.Inc(cpu.Registers.HL)),
            new OpCode(0x24, "INC H",       4,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Inc(cpu.Registers.H)),
            new OpCode(0x25, "DEC H",       4,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Dec(cpu.Registers.H)),
            new OpCode(0x26, "LD H d8",     8,  1, (cpu, i) => cpu.Registers.H = i.Operand8),
            new OpCode(0x27, "DAA",         4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Daa(cpu.Registers.A)),
            new OpCode(0x28, "JR Z r8",     12, 8, 1, (cpu, i) => cpu.JumpRelativeConditional(i.OpCode, (sbyte) i.Operand8, cpu.Registers.AreFlagsSet(RegisterFlags.Z))),
            new OpCode(0x29, "ADD HL HL",   8,  0, (cpu, i) => cpu.Registers.HL = cpu.Alu.Add(cpu.Registers.HL, cpu.Registers.HL)),
            new OpCode(0x2A, "LD A (HL+)",  8,  0, (cpu, i) => { cpu.Registers.A = cpu.MemController.Read(cpu.Registers.HL); cpu.Registers.HL = cpu.Alu.Inc(cpu.Registers.HL); }),
            new OpCode(0x2B, "DEC HL",      8,  0, (cpu, i) => cpu.Registers.HL = cpu.Alu.Dec(cpu.Registers.HL)),
            new OpCode(0x2C, "INC L",       4,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Inc(cpu.Registers.L)),
            new OpCode(0x2D, "DEC L",       4,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Dec(cpu.Registers.L)),
            new OpCode(0x2E, "LD L d8",     8,  1, (cpu, i) => cpu.Registers.L = i.Operand8),
            new OpCode(0x2F, "CPL",         4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Cpl(cpu.Registers.A)),

            // 0x30 - 0x3F
            new OpCode(0x30, "JR NC r8",    12, 8, 1, (cpu, i) => cpu.JumpRelativeConditional(i.OpCode, (sbyte) i.Operand8, !cpu.Registers.AreFlagsSet(RegisterFlags.C))),
            new OpCode(0x31, "LD SP d16",   12, 2, (cpu, i) => cpu.SP = i.Operand16),
            new OpCode(0x32, "LD (HL-) A",  8,  0, (cpu, i) => { cpu.MemController.Write(cpu.Registers.HL, cpu.Registers.A); cpu.Registers.HL = cpu.Alu.Dec(cpu.Registers.HL); }),
            new OpCode(0x33, "INC SP",      8,  0, (cpu, i) => cpu.SP = cpu.Alu.Inc(cpu.SP)),
            new OpCode(0x34, "INC (HL)",    12, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Inc(cpu.MemController.Read(cpu.Registers.HL)))),
            new OpCode(0x35, "DEC (HL)",    12, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Dec(cpu.MemController.Read(cpu.Registers.HL)))),
            new OpCode(0x36, "LD (HL) d8",  12, 1, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, i.Operand8)),
            new OpCode(0x37, "SCF",         4,  0, (cpu, i) => cpu.Alu.Scf()),
            new OpCode(0x38, "JR C r8",     12, 8, 1, (cpu, i) => cpu.JumpRelativeConditional(i.OpCode, (sbyte) i.Operand8, cpu.Registers.AreFlagsSet(RegisterFlags.C))),
            new OpCode(0x39, "ADD HL SP",   8,  0, (cpu, i) => cpu.Registers.HL = cpu.Alu.Add(cpu.Registers.HL, cpu.SP)),
            new OpCode(0x3A, "LD A (HL-)",  8,  0, (cpu, i) => { cpu.Registers.A = cpu.MemController.Read(cpu.Registers.HL); cpu.Registers.HL = cpu.Alu.Dec(cpu.Registers.HL); }),
            new OpCode(0x3B, "DEC SP",      8,  0, (cpu, i) => cpu.SP = cpu.Alu.Dec(cpu.SP)),
            new OpCode(0x3C, "INC A",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Inc(cpu.Registers.A)),
            new OpCode(0x3D, "DEC A",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Dec(cpu.Registers.A)),
            new OpCode(0x3E, "LD A d8",     8,  1, (cpu, i) => cpu.Registers.A = i.Operand8),
            new OpCode(0x3F, "CCF",         4,  0, (cpu, i) => cpu.Alu.Ccf()),

            // 0x40 - 0x4F
            new OpCode(0x40, "LD B B",      4,  0, (cpu, i) => cpu.Registers.B = cpu.Registers.B),
            new OpCode(0x41, "LD B C",      4,  0, (cpu, i) => cpu.Registers.B = cpu.Registers.C),
            new OpCode(0x42, "LD B D",      4,  0, (cpu, i) => cpu.Registers.B = cpu.Registers.D),
            new OpCode(0x43, "LD B E",      4,  0, (cpu, i) => cpu.Registers.B = cpu.Registers.E),
            new OpCode(0x44, "LD B H",      4,  0, (cpu, i) => cpu.Registers.B = cpu.Registers.H),
            new OpCode(0x45, "LD B L",      4,  0, (cpu, i) => cpu.Registers.B = cpu.Registers.L),
            new OpCode(0x46, "LD B (HL)",   8,  0, (cpu, i) => cpu.Registers.B = cpu.MemController.Read(cpu.Registers.HL)),
            new OpCode(0x47, "LD B A",      4,  0, (cpu, i) => cpu.Registers.B = cpu.Registers.A),
            new OpCode(0x48, "LD C B",      4,  0, (cpu, i) => cpu.Registers.C = cpu.Registers.B),
            new OpCode(0x49, "LD C C",      4,  0, (cpu, i) => cpu.Registers.C = cpu.Registers.C),
            new OpCode(0x4A, "LD C D",      4,  0, (cpu, i) => cpu.Registers.C = cpu.Registers.D),
            new OpCode(0x4B, "LD C E",      4,  0, (cpu, i) => cpu.Registers.C = cpu.Registers.E),
            new OpCode(0x4C, "LD C H",      4,  0, (cpu, i) => cpu.Registers.C = cpu.Registers.H),
            new OpCode(0x4D, "LD C L",      4,  0, (cpu, i) => cpu.Registers.C = cpu.Registers.L),
            new OpCode(0x4E, "LD C (HL)",   8,  0, (cpu, i) => cpu.Registers.C = cpu.MemController.Read(cpu.Registers.HL)),
            new OpCode(0x4F, "LD C A",      4,  0, (cpu, i) => cpu.Registers.C = cpu.Registers.A),

            // 0x50 - 0x5F
            new OpCode(0x50, "LD D B",      4,  0, (cpu, i) => cpu.Registers.D = cpu.Registers.B),
            new OpCode(0x51, "LD D C",      4,  0, (cpu, i) => cpu.Registers.D = cpu.Registers.C),
            new OpCode(0x52, "LD D D",      4,  0, (cpu, i) => cpu.Registers.D = cpu.Registers.D),
            new OpCode(0x53, "LD D E",      4,  0, (cpu, i) => cpu.Registers.D = cpu.Registers.E),
            new OpCode(0x54, "LD D H",      4,  0, (cpu, i) => cpu.Registers.D = cpu.Registers.H),
            new OpCode(0x55, "LD D L",      4,  0, (cpu, i) => cpu.Registers.D = cpu.Registers.L),
            new OpCode(0x56, "LD D (HL)",   8,  0, (cpu, i) => cpu.Registers.D = cpu.MemController.Read(cpu.Registers.HL)),
            new OpCode(0x57, "LD D A",      4,  0, (cpu, i) => cpu.Registers.D = cpu.Registers.A),
            new OpCode(0x58, "LD E B",      4,  0, (cpu, i) => cpu.Registers.E = cpu.Registers.B),
            new OpCode(0x59, "LD E C",      4,  0, (cpu, i) => cpu.Registers.E = cpu.Registers.C),
            new OpCode(0x5A, "LD E D",      4,  0, (cpu, i) => cpu.Registers.E = cpu.Registers.D),
            new OpCode(0x5B, "LD E E",      4,  0, (cpu, i) => cpu.Registers.E = cpu.Registers.E),
            new OpCode(0x5C, "LD E H",      4,  0, (cpu, i) => cpu.Registers.E = cpu.Registers.H),
            new OpCode(0x5D, "LD E L",      4,  0, (cpu, i) => cpu.Registers.E = cpu.Registers.L),
            new OpCode(0x5E, "LD E (HL)",   8,  0, (cpu, i) => cpu.Registers.E = cpu.MemController.Read(cpu.Registers.HL)),
            new OpCode(0x5F, "LD E A",      4,  0, (cpu, i) => cpu.Registers.E = cpu.Registers.A),

            // 0x60 - 0x6F
            new OpCode(0x60, "LD H B",      4,  0, (cpu, i) => cpu.Registers.H = cpu.Registers.B),
            new OpCode(0x61, "LD H C",      4,  0, (cpu, i) => cpu.Registers.H = cpu.Registers.C),
            new OpCode(0x62, "LD H D",      4,  0, (cpu, i) => cpu.Registers.H = cpu.Registers.D),
            new OpCode(0x63, "LD H E",      4,  0, (cpu, i) => cpu.Registers.H = cpu.Registers.E),
            new OpCode(0x64, "LD H H",      4,  0, (cpu, i) => cpu.Registers.H = cpu.Registers.H),
            new OpCode(0x65, "LD H L",      4,  0, (cpu, i) => cpu.Registers.H = cpu.Registers.L),
            new OpCode(0x66, "LD H (HL)",   8,  0, (cpu, i) => cpu.Registers.H = cpu.MemController.Read(cpu.Registers.HL)),
            new OpCode(0x67, "LD H A",      4,  0, (cpu, i) => cpu.Registers.H = cpu.Registers.A),
            new OpCode(0x68, "LD L B",      4,  0, (cpu, i) => cpu.Registers.L = cpu.Registers.B),
            new OpCode(0x69, "LD L C",      4,  0, (cpu, i) => cpu.Registers.L = cpu.Registers.C),
            new OpCode(0x6A, "LD L D",      4,  0, (cpu, i) => cpu.Registers.L = cpu.Registers.D),
            new OpCode(0x6B, "LD L E",      4,  0, (cpu, i) => cpu.Registers.L = cpu.Registers.E),
            new OpCode(0x6C, "LD L H",      4,  0, (cpu, i) => cpu.Registers.L = cpu.Registers.H),
            new OpCode(0x6D, "LD L L",      4,  0, (cpu, i) => cpu.Registers.L = cpu.Registers.L),
            new OpCode(0x6E, "LD L (HL)",   8,  0, (cpu, i) => cpu.Registers.L = cpu.MemController.Read(cpu.Registers.HL)),
            new OpCode(0x6F, "LD L A",      4,  0, (cpu, i) => cpu.Registers.L = cpu.Registers.A),

            // 0x70 - 0x7F
            new OpCode(0x70, "LD (HL) B",   8,  0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Registers.B)),
            new OpCode(0x71, "LD (HL) C",   8,  0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Registers.C)),
            new OpCode(0x72, "LD (HL) D",   8,  0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Registers.D)),
            new OpCode(0x73, "LD (HL) E",   8,  0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Registers.E)),
            new OpCode(0x74, "LD (HL) H",   8,  0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Registers.H)),
            new OpCode(0x75, "LD (HL) L",   8,  0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Registers.L)),
            new OpCode(0x76, "HALT",        4,  0, (cpu, i) => cpu.Halt()),
            new OpCode(0x77, "LD (HL) A",   8,  0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Registers.A)),
            new OpCode(0x78, "LD A B",      4,  0, (cpu, i) => cpu.Registers.A = cpu.Registers.B),
            new OpCode(0x79, "LD A C",      4,  0, (cpu, i) => cpu.Registers.A = cpu.Registers.C),
            new OpCode(0x7A, "LD A D",      4,  0, (cpu, i) => cpu.Registers.A = cpu.Registers.D),
            new OpCode(0x7B, "LD A E",      4,  0, (cpu, i) => cpu.Registers.A = cpu.Registers.E),
            new OpCode(0x7C, "LD A H",      4,  0, (cpu, i) => cpu.Registers.A = cpu.Registers.H),
            new OpCode(0x7D, "LD A L",      4,  0, (cpu, i) => cpu.Registers.A = cpu.Registers.L),
            new OpCode(0x7E, "LD A (HL)",   8,  0, (cpu, i) => cpu.Registers.A = cpu.MemController.Read(cpu.Registers.HL)),
            new OpCode(0x7F, "LD A A",      4,  0, (cpu, i) => cpu.Registers.A = cpu.Registers.A),

            // 0x80 - 0x8F
            new OpCode(0x80, "ADD B",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Add(cpu.Registers.A, cpu.Registers.B)),
            new OpCode(0x81, "ADD C",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Add(cpu.Registers.A, cpu.Registers.C)),
            new OpCode(0x82, "ADD D",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Add(cpu.Registers.A, cpu.Registers.D)),
            new OpCode(0x83, "ADD E",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Add(cpu.Registers.A, cpu.Registers.E)),
            new OpCode(0x84, "ADD H",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Add(cpu.Registers.A, cpu.Registers.H)),
            new OpCode(0x85, "ADD L",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Add(cpu.Registers.A, cpu.Registers.L)),
            new OpCode(0x86, "ADD (HL)",    8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Add(cpu.Registers.A, cpu.MemController.Read(cpu.Registers.HL))),
            new OpCode(0x87, "ADD A",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Add(cpu.Registers.A, cpu.Registers.A)),
            new OpCode(0x88, "ADC B",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Adc(cpu.Registers.A, cpu.Registers.B)),
            new OpCode(0x89, "ADC C",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Adc(cpu.Registers.A, cpu.Registers.C)),
            new OpCode(0x8A, "ADC D",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Adc(cpu.Registers.A, cpu.Registers.D)),
            new OpCode(0x8B, "ADC E",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Adc(cpu.Registers.A, cpu.Registers.E)),
            new OpCode(0x8C, "ADC H",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Adc(cpu.Registers.A, cpu.Registers.H)),
            new OpCode(0x8D, "ADC L",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Adc(cpu.Registers.A, cpu.Registers.L)),
            new OpCode(0x8E, "ADC (HL)",    8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Adc(cpu.Registers.A, cpu.MemController.Read(cpu.Registers.HL))),
            new OpCode(0x8F, "ADC A",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Adc(cpu.Registers.A, cpu.Registers.A)),

            // 0x90 - 0x9F
            new OpCode(0x90, "SUB B",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sub(cpu.Registers.A, cpu.Registers.B)),
            new OpCode(0x91, "SUB C",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sub(cpu.Registers.A, cpu.Registers.C)),
            new OpCode(0x92, "SUB D",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sub(cpu.Registers.A, cpu.Registers.D)),
            new OpCode(0x93, "SUB E",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sub(cpu.Registers.A, cpu.Registers.E)),
            new OpCode(0x94, "SUB H",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sub(cpu.Registers.A, cpu.Registers.H)),
            new OpCode(0x95, "SUB L",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sub(cpu.Registers.A, cpu.Registers.L)),
            new OpCode(0x96, "SUB (HL)",    8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sub(cpu.Registers.A, cpu.MemController.Read(cpu.Registers.HL))),
            new OpCode(0x97, "SUB A",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sub(cpu.Registers.A, cpu.Registers.A)),
            new OpCode(0x98, "SBC B",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sbc(cpu.Registers.A, cpu.Registers.B)),
            new OpCode(0x99, "SBC C",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sbc(cpu.Registers.A, cpu.Registers.C)),
            new OpCode(0x9A, "SBC D",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sbc(cpu.Registers.A, cpu.Registers.D)),
            new OpCode(0x9B, "SBC E",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sbc(cpu.Registers.A, cpu.Registers.E)),
            new OpCode(0x9C, "SBC H",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sbc(cpu.Registers.A, cpu.Registers.H)),
            new OpCode(0x9D, "SBC L",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sbc(cpu.Registers.A, cpu.Registers.L)),
            new OpCode(0x9E, "SBC (HL)",    8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sbc(cpu.Registers.A, cpu.MemController.Read(cpu.Registers.HL))),
            new OpCode(0x9F, "SBC A",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sbc(cpu.Registers.A, cpu.Registers.A)),

            // 0xA0 - 0xAF
            new OpCode(0xA0, "AND B",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.And(cpu.Registers.A, cpu.Registers.B)),
            new OpCode(0xA1, "AND C",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.And(cpu.Registers.A, cpu.Registers.C)),
            new OpCode(0xA2, "AND D",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.And(cpu.Registers.A, cpu.Registers.D)),
            new OpCode(0xA3, "AND E",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.And(cpu.Registers.A, cpu.Registers.E)),
            new OpCode(0xA4, "AND H",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.And(cpu.Registers.A, cpu.Registers.H)),
            new OpCode(0xA5, "AND L",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.And(cpu.Registers.A, cpu.Registers.L)),
            new OpCode(0xA6, "AND (HL)",    8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.And(cpu.Registers.A, cpu.MemController.Read(cpu.Registers.HL))),
            new OpCode(0xA7, "AND A",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.And(cpu.Registers.A, cpu.Registers.A)),
            new OpCode(0xA8, "XOR B",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Xor(cpu.Registers.A, cpu.Registers.B)),
            new OpCode(0xA9, "XOR C",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Xor(cpu.Registers.A, cpu.Registers.C)),
            new OpCode(0xAA, "XOR D",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Xor(cpu.Registers.A, cpu.Registers.D)),
            new OpCode(0xAB, "XOR E",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Xor(cpu.Registers.A, cpu.Registers.E)),
            new OpCode(0xAC, "XOR H",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Xor(cpu.Registers.A, cpu.Registers.H)),
            new OpCode(0xAD, "XOR L",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Xor(cpu.Registers.A, cpu.Registers.L)),
            new OpCode(0xAE, "XOR (HL)",    8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Xor(cpu.Registers.A, cpu.MemController.Read(cpu.Registers.HL))),
            new OpCode(0xAF, "XOR A",       4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Xor(cpu.Registers.A, cpu.Registers.A)),

            // 0xB0 - 0xBF
            new OpCode(0xB0, "OR B",        4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Or(cpu.Registers.A, cpu.Registers.B)),
            new OpCode(0xB1, "OR C",        4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Or(cpu.Registers.A, cpu.Registers.C)),
            new OpCode(0xB2, "OR D",        4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Or(cpu.Registers.A, cpu.Registers.D)),
            new OpCode(0xB3, "OR E",        4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Or(cpu.Registers.A, cpu.Registers.E)),
            new OpCode(0xB4, "OR H",        4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Or(cpu.Registers.A, cpu.Registers.H)),
            new OpCode(0xB5, "OR L",        4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Or(cpu.Registers.A, cpu.Registers.L)),
            new OpCode(0xB6, "OR (HL)",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Or(cpu.Registers.A, cpu.MemController.Read(cpu.Registers.HL))),
            new OpCode(0xB7, "OR A",        4,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Or(cpu.Registers.A, cpu.Registers.A)),
            new OpCode(0xB8, "CP B",        4,  0, (cpu, i) => cpu.Alu.Cp(cpu.Registers.A, cpu.Registers.B)),
            new OpCode(0xB9, "CP C",        4,  0, (cpu, i) => cpu.Alu.Cp(cpu.Registers.A, cpu.Registers.C)),
            new OpCode(0xBA, "CP D",        4,  0, (cpu, i) => cpu.Alu.Cp(cpu.Registers.A, cpu.Registers.D)),
            new OpCode(0xBB, "CP E",        4,  0, (cpu, i) => cpu.Alu.Cp(cpu.Registers.A, cpu.Registers.E)),
            new OpCode(0xBC, "CP H",        4,  0, (cpu, i) => cpu.Alu.Cp(cpu.Registers.A, cpu.Registers.H)),
            new OpCode(0xBD, "CP L",        4,  0, (cpu, i) => cpu.Alu.Cp(cpu.Registers.A, cpu.Registers.L)),
            new OpCode(0xBE, "CP (HL)",     8,  0, (cpu, i) => cpu.Alu.Cp(cpu.Registers.A, cpu.MemController.Read(cpu.Registers.HL))),
            new OpCode(0xBF, "CP A",        4,  0, (cpu, i) => cpu.Alu.Cp(cpu.Registers.A, cpu.Registers.A)),

            // 0xC0 - 0xCF
            new OpCode(0xC0, "RET NZ",      20, 8, 0, (cpu, i) => cpu.RetConditional(i.OpCode, !cpu.Registers.AreFlagsSet(RegisterFlags.Z))),
            new OpCode(0xC1, "POP BC",      12, 0, (cpu, i) => cpu.Registers.BC = cpu.Pop()),
            new OpCode(0xC2, "JP NZ d16",   16, 12, 2, (cpu, i) => cpu.JumpConditional(i.OpCode, i.Operand16, !cpu.Registers.AreFlagsSet(RegisterFlags.Z))),
            new OpCode(0xC3, "JP d16",      16, 3, (cpu, i) => cpu.Jump(i.Operand16)),
            new OpCode(0xC4, "CALL NZ d16", 24, 12, 2, (cpu, i) => cpu.CallConditional(i.OpCode, i.Operand16, !cpu.Registers.AreFlagsSet(RegisterFlags.Z))),
            new OpCode(0xC5, "PUSH BC",     16, 0, (cpu, i) => cpu.Push(cpu.Registers.BC)),
            new OpCode(0xC6, "ADD A d8",    8,  1, (cpu, i) => cpu.Registers.A = cpu.Alu.Add(cpu.Registers.A, i.Operand8)),
            new OpCode(0xC7, "RST 0x08",    16, 0, (cpu, i) => cpu.Call(0x00)),
            new OpCode(0xC8, "RET Z",       20, 8, 0, (cpu, i) => cpu.RetConditional(i.OpCode, cpu.Registers.AreFlagsSet(RegisterFlags.Z))),
            new OpCode(0xC9, "RET",         16, 0, (cpu, i) => cpu.Ret()),
            new OpCode(0xCA, "JP Z d16",    16, 12, 2, (cpu, i) => cpu.JumpConditional(i.OpCode, i.Operand16, cpu.Registers.AreFlagsSet(RegisterFlags.Z))),
            new OpCode(0xCB, "PREFIX CB",   0,  0, (cpu, i) => throw new InvalidOperationException("PREFIX_ERROR: should have been redirected to prefix table")), // should never retrieve this opcode
            new OpCode(0xCC, "CALL Z d16",  24, 12, 2, (cpu, i) => cpu.CallConditional(i.OpCode, i.Operand16, cpu.Registers.AreFlagsSet(RegisterFlags.Z))),
            new OpCode(0xCD, "CALL d16",    24, 2, (cpu, i) => cpu.Call(i.Operand16)),
            new OpCode(0xCE, "ADC A d8",    8,  1, (cpu, i) => cpu.Registers.A = cpu.Alu.Adc(cpu.Registers.A, i.Operand8)),
            new OpCode(0xCF, "RST 0x08",    16, 0, (cpu, i) => cpu.Call(0x08)),

            // 0xD0 - 0xDF
            new OpCode(0xD0, "RET NC",      20, 8, 0, (cpu, i) => cpu.RetConditional(i.OpCode, !cpu.Registers.AreFlagsSet(RegisterFlags.C))),
            new OpCode(0xD1, "POP DE",      12, 0, (cpu, i) => cpu.Registers.DE = cpu.Pop()),
            new OpCode(0xD2, "JP NZ d16",   16, 12, 2, (cpu, i) => cpu.JumpConditional(i.OpCode, i.Operand16, !cpu.Registers.AreFlagsSet(RegisterFlags.C))),
            new InvalidOpCode(0xD3),
            new OpCode(0xD4, "CALL NC d16", 24, 12, 2, (cpu, i) => cpu.CallConditional(i.OpCode, i.Operand16, !cpu.Registers.AreFlagsSet(RegisterFlags.C))),
            new OpCode(0xD5, "PUSH DE",     16, 0, (cpu, i) => cpu.Push(cpu.Registers.DE)),
            new OpCode(0xD6, "SUB A d8",    8,  1, (cpu, i) => cpu.Registers.A = cpu.Alu.Sub(cpu.Registers.A, i.Operand8)),
            new OpCode(0xD7, "RST 0x10",    16, 0, (cpu, i) => cpu.Call(0x10)),
            new OpCode(0xD8, "RET C",       20, 8, 0, (cpu, i) => cpu.RetConditional(i.OpCode, cpu.Registers.AreFlagsSet(RegisterFlags.C))),
            new OpCode(0xD9, "RETI",        16, 0, (cpu, i) => {cpu.Ret(); cpu.EnableInterrupts(); }), 
            new OpCode(0xDA, "JP C d16",    16, 12, 2, (cpu, i) => cpu.JumpConditional(i.OpCode, i.Operand16, cpu.Registers.AreFlagsSet(RegisterFlags.C))),
            new InvalidOpCode(0xDB),
            new OpCode(0xDC, "CALL C d16",  24, 12, 2, (cpu, i) => cpu.CallConditional(i.OpCode, i.Operand16, cpu.Registers.AreFlagsSet(RegisterFlags.C))),
            new InvalidOpCode(0xDD),
            new OpCode(0xDE, "SBC A d8",    8,  1, (cpu, i) => cpu.Registers.A = cpu.Alu.Sbc(cpu.Registers.A, i.Operand8)),
            new OpCode(0xDF, "RST 0x18",    16, 0, (cpu, i) => cpu.Call(0x18)),

            // 0xE0 - 0xEF
            new OpCode(0xE0, "LDH (d8) A",  12, 1, (cpu, i) => cpu.MemController.Write((ushort) (0xFF00 + i.Operand8), cpu.Registers.A)),
            new OpCode(0xE1, "POP HL",      12, 0, (cpu, i) => cpu.Registers.HL = cpu.Pop()),
            new OpCode(0xE2, "LDH (C) A",   12, 0, (cpu, i) => cpu.MemController.Write((ushort) (0xFF00 + cpu.Registers.C), cpu.Registers.A)),
            new InvalidOpCode(0xE3),
            new InvalidOpCode(0xE4),
            new OpCode(0xE5, "PUSH HL",     16, 0, (cpu, i) => cpu.Push(cpu.Registers.HL)),
            new OpCode(0xE6, "AND A d8",    8,  1, (cpu, i) => cpu.Registers.A = cpu.Alu.And(cpu.Registers.A, i.Operand8)),
            new OpCode(0xE7, "RST 0x20",    16, 0, (cpu, i) => cpu.Call(0x20)),
            new OpCode(0xE8, "ADD SP r8",   16, 1, (cpu, i) => cpu.SP = cpu.Alu.Add(cpu.SP, (sbyte) i.Operand8)),
            new OpCode(0xE9, "JP (HL)",     4,  0, (cpu, i) => cpu.Jump(cpu.MemController.Read(cpu.Registers.HL))),
            new OpCode(0xEA, "LD (d16) A",  16, 2, (cpu, i) => cpu.MemController.Write(i.Operand16, cpu.Registers.A)),
            new InvalidOpCode(0xEB),
            new InvalidOpCode(0xEC),
            new InvalidOpCode(0xED),
            new OpCode(0xEE, "XOR A d8",    8,  1, (cpu, i) => cpu.Registers.A = cpu.Alu.Xor(cpu.Registers.A, i.Operand8)),
            new OpCode(0xEF, "RST 0x28",    16, 0, (cpu, i) => cpu.Call(0x28)),

            // 0xF0 - 0xFF
            new OpCode(0xF0, "LDH A (d8)",  12, 1, (cpu, i) => cpu.Registers.A = cpu.MemController.Read((ushort) (0xFF00 + i.Operand8))),
            new OpCode(0xF1, "POP AF",      12, 0, (cpu, i) => cpu.Registers.AF = cpu.Pop()),
            new OpCode(0xF2, "LDH A (C)",   8,  0, (cpu, i) => cpu.Registers.A = cpu.MemController.Read((ushort) (0xFF00 + cpu.Registers.C))),
            new OpCode(0xF3, "DI",          4,  0, (cpu, i) => cpu.DisableInterrupts()),
            new InvalidOpCode(0xF4),
            new OpCode(0xF5, "PUSH AF",     16, 0, (cpu, i) => cpu.Push(cpu.Registers.AF)),
            new OpCode(0xF6, "OR d8",       8,  1, (cpu, i) => cpu.Registers.A = cpu.Alu.Or(cpu.Registers.A, i.Operand8)),
            new OpCode(0xF7, "RST 0x30",    16, 0, (cpu, i) => cpu.Call(0x30)),
            new OpCode(0xF8, "LD HL, SP+r8",12, 1, (cpu, i) => cpu.Registers.HL = cpu.Alu.Add(cpu.SP, (sbyte) i.Operand8)),
            new OpCode(0xF9, "LD SP HL",    8,  0, (cpu, i) => cpu.SP = cpu.Registers.HL),
            new OpCode(0xFA, "LD A (d16)",  16, 2, (cpu, i) => cpu.Registers.A = cpu.MemController.Read(i.Operand16)),
            new OpCode(0xFB, "EI",          4,  0, (cpu, i) => cpu.EnableInterrupts()),
            new InvalidOpCode(0xFC),
            new InvalidOpCode(0xFD),
            new OpCode(0xFE, "CP d8",       8,  1, (cpu, i) => cpu.Alu.Cp(cpu.Registers.A, i.Operand8)),
            new OpCode(0xFF, "RST 0x38",    16, 0, (cpu, i) => cpu.Call(0x38))
        };

        public static readonly OpCode[] PrefixedOpCodes =
        {

            // 0x00 - 0x0F
            new PrefixOpCode(0x00, "RLC B",       8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Rlc(cpu.Registers.B)),
            new PrefixOpCode(0x01, "RLC C",       8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Rlc(cpu.Registers.C)),
            new PrefixOpCode(0x02, "RLC D",       8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Rlc(cpu.Registers.D)),
            new PrefixOpCode(0x03, "RLC E",       8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Rlc(cpu.Registers.E)),
            new PrefixOpCode(0x04, "RLC H",       8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Rlc(cpu.Registers.H)),
            new PrefixOpCode(0x05, "RLC L",       8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Rlc(cpu.Registers.L)),
            new PrefixOpCode(0x06, "RLC (HL)",    16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Rlc(cpu.MemController.Read(cpu.Registers.HL)))),
            new PrefixOpCode(0x07, "RLC A",       8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Rlc(cpu.Registers.A)),
            new PrefixOpCode(0x08, "RRC B",       8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Rrc(cpu.Registers.B)),
            new PrefixOpCode(0x09, "RRC C",       8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Rrc(cpu.Registers.C)),
            new PrefixOpCode(0x0A, "RRC D",       8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Rrc(cpu.Registers.D)),
            new PrefixOpCode(0x0B, "RRC E",       8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Rrc(cpu.Registers.E)),
            new PrefixOpCode(0x0C, "RRC H",       8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Rrc(cpu.Registers.H)),
            new PrefixOpCode(0x0D, "RRC L",       8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Rrc(cpu.Registers.L)),
            new PrefixOpCode(0x0E, "RRC (HL)",    16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Rrc(cpu.MemController.Read(cpu.Registers.HL)))),
            new PrefixOpCode(0x0F, "RRC A",       8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Rrc(cpu.Registers.A)),

            // 0x10 - 0x1F
            new PrefixOpCode(0x10, "RL B",        8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Rl(cpu.Registers.B)),
            new PrefixOpCode(0x11, "RL C",        8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Rl(cpu.Registers.C)),
            new PrefixOpCode(0x12, "RL D",        8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Rl(cpu.Registers.D)),
            new PrefixOpCode(0x13, "RL E",        8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Rl(cpu.Registers.E)),
            new PrefixOpCode(0x14, "RL H",        8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Rl(cpu.Registers.H)),
            new PrefixOpCode(0x15, "RL L",        8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Rl(cpu.Registers.L)),
            new PrefixOpCode(0x16, "RL (HL)",     16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Rl(cpu.MemController.Read(cpu.Registers.HL)))),
            new PrefixOpCode(0x17, "RL A",        8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Rl(cpu.Registers.A)),
            new PrefixOpCode(0x18, "RR B",        8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Rr(cpu.Registers.B)),
            new PrefixOpCode(0x19, "RR C",        8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Rr(cpu.Registers.C)),
            new PrefixOpCode(0x1A, "RR D",        8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Rr(cpu.Registers.D)),
            new PrefixOpCode(0x1B, "RR E",        8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Rr(cpu.Registers.E)),
            new PrefixOpCode(0x1C, "RR H",        8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Rr(cpu.Registers.H)),
            new PrefixOpCode(0x1D, "RR L",        8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Rr(cpu.Registers.L)),
            new PrefixOpCode(0x1E, "RR (HL)",     16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Rr(cpu.MemController.Read(cpu.Registers.HL)))),
            new PrefixOpCode(0x1F, "RR A",        8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Rr(cpu.Registers.A)),

            // 0x20 - 0x2F
            new PrefixOpCode(0x20, "SLA B",       8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Sla(cpu.Registers.B)),
            new PrefixOpCode(0x21, "SLA C",       8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Sla(cpu.Registers.C)),
            new PrefixOpCode(0x22, "SLA D",       8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Sla(cpu.Registers.D)),
            new PrefixOpCode(0x23, "SLA E",       8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Sla(cpu.Registers.E)),
            new PrefixOpCode(0x24, "SLA H",       8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Sla(cpu.Registers.H)),
            new PrefixOpCode(0x25, "SLA L",       8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Sla(cpu.Registers.L)),
            new PrefixOpCode(0x26, "SLA (HL)",    16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Sla(cpu.MemController.Read(cpu.Registers.HL)))),
            new PrefixOpCode(0x27, "SLA A",       8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sla(cpu.Registers.A)),
            new PrefixOpCode(0x28, "SRA B",       8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Sra(cpu.Registers.B)),
            new PrefixOpCode(0x29, "SRA C",       8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Sra(cpu.Registers.C)),
            new PrefixOpCode(0x2A, "SRA D",       8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Sra(cpu.Registers.D)),
            new PrefixOpCode(0x2B, "SRA E",       8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Sra(cpu.Registers.E)),
            new PrefixOpCode(0x2C, "SRA H",       8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Sra(cpu.Registers.H)),
            new PrefixOpCode(0x2D, "SRA L",       8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Sra(cpu.Registers.L)),
            new PrefixOpCode(0x2E, "SRA (HL)",    16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Sra(cpu.MemController.Read(cpu.Registers.HL)))),
            new PrefixOpCode(0x2F, "SRA A",       8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Sra(cpu.Registers.A)),

            // 0x30 - 0x3F
            new PrefixOpCode(0x30, "SWAP B",      8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Swap(cpu.Registers.B)),
            new PrefixOpCode(0x31, "SWAP C",      8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Swap(cpu.Registers.C)),
            new PrefixOpCode(0x32, "SWAP D",      8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Swap(cpu.Registers.D)),
            new PrefixOpCode(0x33, "SWAP E",      8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Swap(cpu.Registers.E)),
            new PrefixOpCode(0x34, "SWAP H",      8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Swap(cpu.Registers.H)),
            new PrefixOpCode(0x35, "SWAP L",      8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Swap(cpu.Registers.L)),
            new PrefixOpCode(0x36, "SWAP (HL)",   16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Swap(cpu.MemController.Read(cpu.Registers.HL)))),
            new PrefixOpCode(0x37, "SWAP A",      8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Swap(cpu.Registers.A)),
            new PrefixOpCode(0x38, "SRA B",       8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Srl(cpu.Registers.B)),
            new PrefixOpCode(0x39, "SRA C",       8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Srl(cpu.Registers.C)),
            new PrefixOpCode(0x3A, "SRA D",       8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Srl(cpu.Registers.D)),
            new PrefixOpCode(0x3B, "SRA E",       8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Srl(cpu.Registers.E)),
            new PrefixOpCode(0x3C, "SRA H",       8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Srl(cpu.Registers.H)),
            new PrefixOpCode(0x3D, "SRA L",       8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Srl(cpu.Registers.L)),
            new PrefixOpCode(0x3E, "SRA (HL)",    16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Srl(cpu.MemController.Read(cpu.Registers.HL)))),
            new PrefixOpCode(0x3F, "SRA A",       8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Srl(cpu.Registers.A)),
                        
            // 0x40 - 0x4F
            new PrefixOpCode(0x40, "BIT 0 B",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.B, 0)),
            new PrefixOpCode(0x41, "BIT 0 C",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.C, 0)),
            new PrefixOpCode(0x42, "BIT 0 D",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.D, 0)),
            new PrefixOpCode(0x43, "BIT 0 E",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.E, 0)),
            new PrefixOpCode(0x44, "BIT 0 H",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.H, 0)),
            new PrefixOpCode(0x45, "BIT 0 L",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.L, 0)),
            new PrefixOpCode(0x46, "BIT 0 (HL)",  12, 0, (cpu, i) => cpu.Alu.Bit(cpu.MemController.Read(cpu.Registers.HL), 0)),
            new PrefixOpCode(0x47, "BIT 0 A",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.A, 0)),
            new PrefixOpCode(0x48, "BIT 1 B",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.B, 1)),
            new PrefixOpCode(0x49, "BIT 1 C",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.C, 1)),
            new PrefixOpCode(0x4A, "BIT 1 D",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.D, 1)),
            new PrefixOpCode(0x4B, "BIT 1 E",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.E, 1)),
            new PrefixOpCode(0x4C, "BIT 1 H",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.H, 1)),
            new PrefixOpCode(0x4D, "BIT 1 L",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.L, 1)),
            new PrefixOpCode(0x4E, "BIT 1 (HL)",  12, 0, (cpu, i) => cpu.Alu.Bit(cpu.MemController.Read(cpu.Registers.HL), 1)),
            new PrefixOpCode(0x4F, "BIT 1 A",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.A, 1)),
            
            // 0x50 - 0x5F
            new PrefixOpCode(0x50, "BIT 2 B",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.B, 2)),
            new PrefixOpCode(0x51, "BIT 2 C",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.C, 2)),
            new PrefixOpCode(0x52, "BIT 2 D",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.D, 2)),
            new PrefixOpCode(0x53, "BIT 2 E",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.E, 2)),
            new PrefixOpCode(0x54, "BIT 2 H",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.H, 2)),
            new PrefixOpCode(0x55, "BIT 2 L",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.L, 2)),
            new PrefixOpCode(0x56, "BIT 2 (HL)",  12, 0, (cpu, i) => cpu.Alu.Bit(cpu.MemController.Read(cpu.Registers.HL), 2)),
            new PrefixOpCode(0x57, "BIT 2 A",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.A, 2)),
            new PrefixOpCode(0x58, "BIT 3 B",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.B, 3)),
            new PrefixOpCode(0x59, "BIT 3 C",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.C, 3)),
            new PrefixOpCode(0x5A, "BIT 3 D",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.D, 3)),
            new PrefixOpCode(0x5B, "BIT 3 E",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.E, 3)),
            new PrefixOpCode(0x5C, "BIT 3 H",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.H, 3)),
            new PrefixOpCode(0x5D, "BIT 3 L",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.L, 3)),
            new PrefixOpCode(0x5E, "BIT 3 (HL)",  12, 0, (cpu, i) => cpu.Alu.Bit(cpu.MemController.Read(cpu.Registers.HL), 3)),
            new PrefixOpCode(0x5F, "BIT 3 A",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.A, 3)),
            
            // 0x60 - 0x6F
            new PrefixOpCode(0x60, "BIT 4 B",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.B, 4)),
            new PrefixOpCode(0x61, "BIT 4 C",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.C, 4)),
            new PrefixOpCode(0x62, "BIT 4 D",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.D, 4)),
            new PrefixOpCode(0x63, "BIT 4 E",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.E, 4)),
            new PrefixOpCode(0x64, "BIT 4 H",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.H, 4)),
            new PrefixOpCode(0x65, "BIT 4 L",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.L, 4)),
            new PrefixOpCode(0x66, "BIT 4 (HL)",  12, 0, (cpu, i) => cpu.Alu.Bit(cpu.MemController.Read(cpu.Registers.HL), 4)),
            new PrefixOpCode(0x67, "BIT 4 A",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.A, 4)),
            new PrefixOpCode(0x68, "BIT 5 B",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.B, 5)),
            new PrefixOpCode(0x69, "BIT 5 C",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.C, 5)),
            new PrefixOpCode(0x6A, "BIT 5 D",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.D, 5)),
            new PrefixOpCode(0x6B, "BIT 5 E",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.E, 5)),
            new PrefixOpCode(0x6C, "BIT 5 H",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.H, 5)),
            new PrefixOpCode(0x6D, "BIT 5 L",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.L, 5)),
            new PrefixOpCode(0x6E, "BIT 5 (HL)",  12, 0, (cpu, i) => cpu.Alu.Bit(cpu.MemController.Read(cpu.Registers.HL), 5)),
            new PrefixOpCode(0x6F, "BIT 5 A",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.A, 5)),
            
            // 0x70 - 0x7F
            new PrefixOpCode(0x70, "BIT 6 B",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.B, 6)),
            new PrefixOpCode(0x71, "BIT 6 C",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.C, 6)),
            new PrefixOpCode(0x72, "BIT 6 D",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.D, 6)),
            new PrefixOpCode(0x73, "BIT 6 E",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.E, 6)),
            new PrefixOpCode(0x74, "BIT 6 H",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.H, 6)),
            new PrefixOpCode(0x75, "BIT 6 L",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.L, 6)),
            new PrefixOpCode(0x76, "BIT 6 (HL)",  12, 0, (cpu, i) => cpu.Alu.Bit(cpu.MemController.Read(cpu.Registers.HL), 6)),
            new PrefixOpCode(0x77, "BIT 6 A",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.A, 6)),
            new PrefixOpCode(0x78, "BIT 7 B",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.B, 7)),
            new PrefixOpCode(0x79, "BIT 7 C",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.C, 7)),
            new PrefixOpCode(0x7A, "BIT 7 D",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.D, 7)),
            new PrefixOpCode(0x7B, "BIT 7 E",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.E, 7)),
            new PrefixOpCode(0x7C, "BIT 7 H",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.H, 7)),
            new PrefixOpCode(0x7D, "BIT 7 L",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.L, 7)),
            new PrefixOpCode(0x7E, "BIT 7 (HL)",  12, 0, (cpu, i) => cpu.Alu.Bit(cpu.MemController.Read(cpu.Registers.HL), 7)),
            new PrefixOpCode(0x7F, "BIT 7 A",     8,  0, (cpu, i) => cpu.Alu.Bit(cpu.Registers.A, 7)),

            // 0x80 - 0x8F
            new PrefixOpCode(0x80, "RES 0 B",     8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Res(cpu.Registers.B, 0)),
            new PrefixOpCode(0x81, "RES 0 C",     8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Res(cpu.Registers.C, 0)),
            new PrefixOpCode(0x82, "RES 0 D",     8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Res(cpu.Registers.D, 0)),
            new PrefixOpCode(0x83, "RES 0 E",     8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Res(cpu.Registers.E, 0)),
            new PrefixOpCode(0x84, "RES 0 H",     8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Res(cpu.Registers.H, 0)),
            new PrefixOpCode(0x85, "RES 0 L",     8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Res(cpu.Registers.L, 0)),
            new PrefixOpCode(0x86, "RES 0 (HL)",  16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Res(cpu.MemController.Read(cpu.Registers.HL), 0))),
            new PrefixOpCode(0x87, "RES 0 A",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Res(cpu.Registers.A, 0)),
            new PrefixOpCode(0x88, "RES 1 B",     8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Res(cpu.Registers.B, 1)),
            new PrefixOpCode(0x89, "RES 1 C",     8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Res(cpu.Registers.C, 1)),
            new PrefixOpCode(0x8A, "RES 1 D",     8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Res(cpu.Registers.D, 1)),
            new PrefixOpCode(0x8B, "RES 1 E",     8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Res(cpu.Registers.E, 1)),
            new PrefixOpCode(0x8C, "RES 1 H",     8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Res(cpu.Registers.H, 1)),
            new PrefixOpCode(0x8D, "RES 1 L",     8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Res(cpu.Registers.L, 1)),
            new PrefixOpCode(0x8E, "RES 1 (HL)",  16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Res(cpu.MemController.Read(cpu.Registers.HL), 1))),
            new PrefixOpCode(0x8F, "RES 1 A",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Res(cpu.Registers.A, 1)),

            // 0x90 - 0x9F
            new PrefixOpCode(0x90, "RES 2 B",     8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Res(cpu.Registers.B, 2)),
            new PrefixOpCode(0x91, "RES 2 C",     8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Res(cpu.Registers.C, 2)),
            new PrefixOpCode(0x92, "RES 2 D",     8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Res(cpu.Registers.D, 2)),
            new PrefixOpCode(0x93, "RES 2 E",     8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Res(cpu.Registers.E, 2)),
            new PrefixOpCode(0x94, "RES 2 H",     8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Res(cpu.Registers.H, 2)),
            new PrefixOpCode(0x95, "RES 2 L",     8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Res(cpu.Registers.L, 2)),
            new PrefixOpCode(0x96, "RES 2 (HL)",  16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Res(cpu.MemController.Read(cpu.Registers.HL), 2))),
            new PrefixOpCode(0x97, "RES 2 A",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Res(cpu.Registers.A, 2)),
            new PrefixOpCode(0x98, "RES 3 B",     8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Res(cpu.Registers.B, 3)),
            new PrefixOpCode(0x99, "RES 3 C",     8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Res(cpu.Registers.C, 3)),
            new PrefixOpCode(0x9A, "RES 3 D",     8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Res(cpu.Registers.D, 3)),
            new PrefixOpCode(0x9B, "RES 3 E",     8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Res(cpu.Registers.E, 3)),
            new PrefixOpCode(0x9C, "RES 3 H",     8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Res(cpu.Registers.H, 3)),
            new PrefixOpCode(0x9D, "RES 3 L",     8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Res(cpu.Registers.L, 3)),
            new PrefixOpCode(0x9E, "RES 3 (HL)",  16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Res(cpu.MemController.Read(cpu.Registers.HL), 3))),
            new PrefixOpCode(0x9F, "RES 3 A",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Res(cpu.Registers.A, 3)),

            // 0xA0 - 0xAF
            new PrefixOpCode(0xA0, "RES 4 B",     8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Res(cpu.Registers.B, 4)),
            new PrefixOpCode(0xA1, "RES 4 C",     8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Res(cpu.Registers.C, 4)),
            new PrefixOpCode(0xA2, "RES 4 D",     8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Res(cpu.Registers.D, 4)),
            new PrefixOpCode(0xA3, "RES 4 E",     8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Res(cpu.Registers.E, 4)),
            new PrefixOpCode(0xA4, "RES 4 H",     8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Res(cpu.Registers.H, 4)),
            new PrefixOpCode(0xA5, "RES 4 L",     8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Res(cpu.Registers.L, 4)),
            new PrefixOpCode(0xA6, "RES 4 (HL)",  16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Res(cpu.MemController.Read(cpu.Registers.HL), 4))),
            new PrefixOpCode(0xA7, "RES 4 A",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Res(cpu.Registers.A, 4)),
            new PrefixOpCode(0xA8, "RES 5 B",     8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Res(cpu.Registers.B, 5)),
            new PrefixOpCode(0xA9, "RES 5 C",     8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Res(cpu.Registers.C, 5)),
            new PrefixOpCode(0xAA, "RES 5 D",     8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Res(cpu.Registers.D, 5)),
            new PrefixOpCode(0xAB, "RES 5 E",     8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Res(cpu.Registers.E, 5)),
            new PrefixOpCode(0xAC, "RES 5 H",     8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Res(cpu.Registers.H, 5)),
            new PrefixOpCode(0xAD, "RES 5 L",     8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Res(cpu.Registers.L, 5)),
            new PrefixOpCode(0xAE, "RES 5 (HL)",  16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Res(cpu.MemController.Read(cpu.Registers.HL), 5))),
            new PrefixOpCode(0xAF, "RES 5 A",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Res(cpu.Registers.A, 5)),

            // 0xB0 - 0xBF
            new PrefixOpCode(0xB0, "RES 6 B",     8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Res(cpu.Registers.B, 6)),
            new PrefixOpCode(0xB1, "RES 6 C",     8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Res(cpu.Registers.C, 6)),
            new PrefixOpCode(0xB2, "RES 6 D",     8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Res(cpu.Registers.D, 6)),
            new PrefixOpCode(0xB3, "RES 6 E",     8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Res(cpu.Registers.E, 6)),
            new PrefixOpCode(0xB4, "RES 6 H",     8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Res(cpu.Registers.H, 6)),
            new PrefixOpCode(0xB5, "RES 6 L",     8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Res(cpu.Registers.L, 6)),
            new PrefixOpCode(0xB6, "RES 6 (HL)",  16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Res(cpu.MemController.Read(cpu.Registers.HL), 6))),
            new PrefixOpCode(0xB7, "RES 6 A",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Res(cpu.Registers.A, 6)),
            new PrefixOpCode(0xB8, "RES 7 B",     8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Res(cpu.Registers.B, 7)),
            new PrefixOpCode(0xB9, "RES 7 C",     8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Res(cpu.Registers.C, 7)),
            new PrefixOpCode(0xBA, "RES 7 D",     8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Res(cpu.Registers.D, 7)),
            new PrefixOpCode(0xBB, "RES 7 E",     8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Res(cpu.Registers.E, 7)),
            new PrefixOpCode(0xBC, "RES 7 H",     8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Res(cpu.Registers.H, 7)),
            new PrefixOpCode(0xBD, "RES 7 L",     8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Res(cpu.Registers.L, 7)),
            new PrefixOpCode(0xBE, "RES 7 (HL)",  16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Res(cpu.MemController.Read(cpu.Registers.HL), 7))),
            new PrefixOpCode(0xBF, "RES 7 A",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Res(cpu.Registers.A, 7)),

            // 0xC0 - 0xCF
            new PrefixOpCode(0xC0, "SET 0 B",     8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Set(cpu.Registers.B, 0)),
            new PrefixOpCode(0xC1, "SET 0 C",     8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Set(cpu.Registers.C, 0)),
            new PrefixOpCode(0xC2, "SET 0 D",     8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Set(cpu.Registers.D, 0)),
            new PrefixOpCode(0xC3, "SET 0 E",     8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Set(cpu.Registers.E, 0)),
            new PrefixOpCode(0xC4, "SET 0 H",     8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Set(cpu.Registers.H, 0)),
            new PrefixOpCode(0xC5, "SET 0 L",     8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Set(cpu.Registers.L, 0)),
            new PrefixOpCode(0xC6, "SET 0 (HL)",  16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Set(cpu.MemController.Read(cpu.Registers.HL), 0))),
            new PrefixOpCode(0xC7, "SET 0 A",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Set(cpu.Registers.A, 0)),
            new PrefixOpCode(0xC8, "SET 1 B",     8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Set(cpu.Registers.B, 1)),
            new PrefixOpCode(0xC9, "SET 1 C",     8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Set(cpu.Registers.C, 1)),
            new PrefixOpCode(0xCA, "SET 1 D",     8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Set(cpu.Registers.D, 1)),
            new PrefixOpCode(0xCB, "SET 1 E",     8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Set(cpu.Registers.E, 1)),
            new PrefixOpCode(0xCC, "SET 1 H",     8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Set(cpu.Registers.H, 1)),
            new PrefixOpCode(0xCD, "SET 1 L",     8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Set(cpu.Registers.L, 1)),
            new PrefixOpCode(0xCE, "SET 1 (HL)",  16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Set(cpu.MemController.Read(cpu.Registers.HL), 1))),
            new PrefixOpCode(0xCF, "SET 1 A",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Set(cpu.Registers.A, 1)),

            // 0xD0 - 0xDF
            new PrefixOpCode(0xD0, "SET 2 B",     8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Set(cpu.Registers.B, 2)),
            new PrefixOpCode(0xD1, "SET 2 C",     8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Set(cpu.Registers.C, 2)),
            new PrefixOpCode(0xD2, "SET 2 D",     8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Set(cpu.Registers.D, 2)),
            new PrefixOpCode(0xD3, "SET 2 E",     8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Set(cpu.Registers.E, 2)),
            new PrefixOpCode(0xD4, "SET 2 H",     8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Set(cpu.Registers.H, 2)),
            new PrefixOpCode(0xD5, "SET 2 L",     8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Set(cpu.Registers.L, 2)),
            new PrefixOpCode(0xD6, "SET 2 (HL)",  16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Set(cpu.MemController.Read(cpu.Registers.HL), 2))),
            new PrefixOpCode(0xD7, "SET 2 A",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Set(cpu.Registers.A, 2)),
            new PrefixOpCode(0xD8, "SET 3 B",     8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Set(cpu.Registers.B, 3)),
            new PrefixOpCode(0xD9, "SET 3 C",     8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Set(cpu.Registers.C, 3)),
            new PrefixOpCode(0xDA, "SET 3 D",     8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Set(cpu.Registers.D, 3)),
            new PrefixOpCode(0xDB, "SET 3 E",     8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Set(cpu.Registers.E, 3)),
            new PrefixOpCode(0xDC, "SET 3 H",     8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Set(cpu.Registers.H, 3)),
            new PrefixOpCode(0xDD, "SET 3 L",     8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Set(cpu.Registers.L, 3)),
            new PrefixOpCode(0xDE, "SET 3 (HL)",  16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Set(cpu.MemController.Read(cpu.Registers.HL), 3))),
            new PrefixOpCode(0xDF, "SET 3 A",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Set(cpu.Registers.A, 3)),

            // 0xE0 - 0xEF
            new PrefixOpCode(0xE0, "SET 4 B",     8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Set(cpu.Registers.B, 4)),
            new PrefixOpCode(0xE1, "SET 4 C",     8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Set(cpu.Registers.C, 4)),
            new PrefixOpCode(0xE2, "SET 4 D",     8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Set(cpu.Registers.D, 4)),
            new PrefixOpCode(0xE3, "SET 4 E",     8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Set(cpu.Registers.E, 4)),
            new PrefixOpCode(0xE4, "SET 4 H",     8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Set(cpu.Registers.H, 4)),
            new PrefixOpCode(0xE5, "SET 4 L",     8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Set(cpu.Registers.L, 4)),
            new PrefixOpCode(0xE6, "SET 4 (HL)",  16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Set(cpu.MemController.Read(cpu.Registers.HL), 4))),
            new PrefixOpCode(0xE7, "SET 4 A",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Set(cpu.Registers.A, 4)),
            new PrefixOpCode(0xE8, "SET 5 B",     8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Set(cpu.Registers.B, 5)),
            new PrefixOpCode(0xE9, "SET 5 C",     8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Set(cpu.Registers.C, 5)),
            new PrefixOpCode(0xEA, "SET 5 D",     8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Set(cpu.Registers.D, 5)),
            new PrefixOpCode(0xEB, "SET 5 E",     8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Set(cpu.Registers.E, 5)),
            new PrefixOpCode(0xEC, "SET 5 H",     8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Set(cpu.Registers.H, 5)),
            new PrefixOpCode(0xED, "SET 5 L",     8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Set(cpu.Registers.L, 5)),
            new PrefixOpCode(0xEE, "SET 5 (HL)",  16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Set(cpu.MemController.Read(cpu.Registers.HL), 5))),
            new PrefixOpCode(0xEF, "SET 5 A",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Set(cpu.Registers.A, 5)),

            // 0xF0 - 0xFF
            new PrefixOpCode(0xF0, "SET 6 B",     8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Set(cpu.Registers.B, 6)),
            new PrefixOpCode(0xF1, "SET 6 C",     8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Set(cpu.Registers.C, 6)),
            new PrefixOpCode(0xF2, "SET 6 D",     8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Set(cpu.Registers.D, 6)),
            new PrefixOpCode(0xF3, "SET 6 E",     8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Set(cpu.Registers.E, 6)),
            new PrefixOpCode(0xF4, "SET 6 H",     8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Set(cpu.Registers.H, 6)),
            new PrefixOpCode(0xF5, "SET 6 L",     8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Set(cpu.Registers.L, 6)),
            new PrefixOpCode(0xF6, "SET 6 (HL)",  16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Set(cpu.MemController.Read(cpu.Registers.HL), 6))),
            new PrefixOpCode(0xF7, "SET 6 A",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Set(cpu.Registers.A, 6)),
            new PrefixOpCode(0xF8, "SET 7 B",     8,  0, (cpu, i) => cpu.Registers.B = cpu.Alu.Set(cpu.Registers.B, 7)),
            new PrefixOpCode(0xF9, "SET 7 C",     8,  0, (cpu, i) => cpu.Registers.C = cpu.Alu.Set(cpu.Registers.C, 7)),
            new PrefixOpCode(0xFA, "SET 7 D",     8,  0, (cpu, i) => cpu.Registers.D = cpu.Alu.Set(cpu.Registers.D, 7)),
            new PrefixOpCode(0xFB, "SET 7 E",     8,  0, (cpu, i) => cpu.Registers.E = cpu.Alu.Set(cpu.Registers.E, 7)),
            new PrefixOpCode(0xFC, "SET 7 H",     8,  0, (cpu, i) => cpu.Registers.H = cpu.Alu.Set(cpu.Registers.H, 7)),
            new PrefixOpCode(0xFD, "SET 7 L",     8,  0, (cpu, i) => cpu.Registers.L = cpu.Alu.Set(cpu.Registers.L, 7)),
            new PrefixOpCode(0xFE, "SET 7 (HL)",  16, 0, (cpu, i) => cpu.MemController.Write(cpu.Registers.HL, cpu.Alu.Set(cpu.MemController.Read(cpu.Registers.HL), 7))),
            new PrefixOpCode(0xFF, "SET 7 A",     8,  0, (cpu, i) => cpu.Registers.A = cpu.Alu.Set(cpu.Registers.A, 7)),
        };
    }
}
